:PROPERTIES:
#+TITLE: Emacs Configuration
#+AUTHOR: Kloenk <me@kloenk.de>
#+PROPERTY: header-args:emacs-lisp :exports code :noweb yes :tangle default.el :comments org
#+PROPERTY: header-args:nix :exports code :tangle packages.nix
#+STARTUP: fold

#+NAME: copyright
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t; -*-
;; Copyright (c) 2024 kloenk
;;
;; Author: kloenk <me@kloenk.dev>
;;
;; This file is not part of GNU Emacs.
(message "Loading kloenk's config for Emacs...")
#+END_SRC

* Early init config
#+BEGIN_SRC emacs-lisp :tangle site-start.el
  <<copyright>>
  (setq gc-cons-threshold 10000000
        read-process-output-max (* 1024 1024))
  (setq byte-compile-warnings '(not obsolete))
  (setq warning-suppress-log-types '((comp) (bytecomp)))
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; Silence stupid startup message
  (setq inhibit-startup-echo-area-message (user-login-name))

  ;; Default frame configuration: full screen, good-looking title bar on macOS
  (setq frame-resize-pixelwise t)

  (setq default-frame-alist '((fullscreen . maximized)

                              ;; You can turn off scroll bars by uncommenting these lines:
                              ;; (vertical-scroll-bars . nil)
                              ;; (horizontal-scroll-bars . nil)

                              ;; Setting the face in here prevents flashes of
                              ;; color as the theme gets activated
                              (background-color . "#000000")
                              (ns-appearance . dark)
                              (ns-transparent-titlebar . t)))

#+END_SRC]
** Start of nix configuration
#+BEGIN_SRC nix
e: with e; [
#+END_SRC

* Keep Folders Clean :no-littering:
#+BEGIN_SRC nix
  no-littering
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package no-littering)
  (setq auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

* Basic
** UI Configuration
Disable some UI elements and similar
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)   ; Disable visible scrollbar
  (tool-bar-mode -1)     ; Disable the toolbar
  (tooltip-mode -1)      ; Disable tooltips
  (set-fringe-mode 10)   ; Give some breathing room

  (menu-bar-mode -1)     ; Disable menu bar
  (column-number-mode)
  (global-display-line-numbers-mode t)



  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** Paths :TODO:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package exec-path-from-shell)
  (dolist (var '("SSH_AUTH_SOCK" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE"))
    (add-to-list 'exec-path-from-shell-variables-var))
  (when (memq window-system '(mac ns x pgtk))
    (exec-path-from-shell-initialize))
#+END_SRC
#+BEGIN_SRC nix
exec-path-from-shell
#+END_SRC

* UI Configuration
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-pro-theme
    :init (load-theme 'monokai-pro t))
#+END_SRC
#+BEGIN_SRC nix
  monokai-pro-theme
#+END_SRC
** Paren
#+begin_src emacs-lisp
    (electric-pair-mode t)
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
#+begin_src nix
rainbow-delimiters
#+end_src
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :init
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode)
    :custom
    (powerline-height 24)
    (powerline-default-seperator 'wave))
#+END_SRC
#+BEGIN_SRC nix
  spaceline
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init (dashboard-setup-startup-hook)
    :custom
    (dashboard-set-footer nil))
#+END_SRC
#+BEGIN_SRC nix
  dashboard
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+END_SRC

** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+END_SRC
** Company Mode
Company Mode provides a in-buffer completion interface
#+begin_src emacs-lisp
  (use-package company
  :after eglot
  :hook ((prog-mode text-mode) . company-mode)
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.1))
#+end_src
#+begin_src nix
company
#+end_src
** Improved Candidate Sorting with =prescient.el=
#+BEGIN_SRC emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+END_SRC

#+BEGIN_SRC nix
  ivy
  ivy-rich
  counsel
  ivy-prescient
#+END_SRC
** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpfule-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC
#+BEGIN_SRC nix
  helpful
#+END_SRC
* Org Mode
** Font Helper
#+BEGIN_SRC emacs-lisp
  (defun kloenk/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "-UKWN-Monaspace Krypton Var-regular-normal-normal-*-13-*-*-*-*-0-iso10646-1" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+END_SRC
** Variables
#+BEGIN_SRC emacs-lisp
  (defvar kloenk/org-root (file-name-as-directory "~/Developer/Org"))
  (defvar kloenk/org-files-tasks (concat kloenk/org-root "Tasks.org"))
  (defvar kloenk/org-files-habits (concat kloenk/org-root "Habits.org"))
  (defvar kloenk/org-files-journal (concat kloenk/org-root "Journal.org"))
  (defvar kloenk/org-files-metrics (concat kloenk/org-root "Metrics.org"))
  (defvar kloenk/org-files-birthdays (concat kloenk/org-root "Birthdays.org"))
#+END_SRC
** Basic Config
#+BEGIN_SRC emacs-lisp
  (defun kloenk/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . kloenk/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-support-shift-select t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (if (file-directory-p kloenk/org-root)
        (setq org-agenda-files
              (list kloenk/org-files-tasks
                    kloenk/org-files-habits
                    kloenk/org-files-birthdays)))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp kloenk/org-files-tasks "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree kloenk/org-files-journal)
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree kloenk/org-files-journal)
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree kloenk/org-files-journal)
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline kloenk/org-files-metrics "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
                (lambda () (interactive) (org-capture nil "jj")))

    (kloenk/org-font-setup))

#+END_SRC
*** Disable electric-pair in org mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
** Nicer Heading Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+END_SRC
** Structured Templates
#+begin_src emacs-lisp
  (use-package org-tempo
    :after org
    :config
    (add-to-list 'org-structure-template-alist '("s" . "src"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
    (add-to-list 'org-structure-template-alist '("nix" . "src nix")))
#+end_src
** Table of Contents
#+begin_src emacs-lisp
  (use-package org-make-toc
    :after org
    :hook org-mode)
#+end_src
** Nix packages
#+BEGIN_SRC nix
  org-bullets
  org-make-toc
#+END_SRC
* Development
** Languages
*** Language server
#+begin_src emacs-lisp
(use-package eglot)
#+end_src

*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :after (direnv eglot)
    :mode "\\.nix$"
    :config
    (add-to-list 'eglot-server-programs '(nix-mode . ("nil"))))

  (use-package nix-repl
    :commands (nix-repl))

  (use-package nix-flake
    :custom
    (nix-flake-add-to-registry nil))
#+end_src
#+begin_src nix
nix-mode
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :custom
    (rustic-lsp-client 'eglot))
#+end_src
#+begin_src nix
rustic
#+end_src
*** CMake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode "CMakeLists.txt")
#+end_src
#+begin_src nix
cmake-mode
#+end_src
*** Device Trees
#+begin_src emacs-lisp
  (use-package dts-mode
    :mode ("dts" "dtsi"))
#+end_src
#+begin_src nix
dts-mode
#+end_src
** Organisaztion
*** Direnv
#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src
#+begin_src nix
direnv
#+end_src
*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Devloper")
      (setq projectile-project-search-path '("~/Developer")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src
#+begin_src nix
projectile
counsel-projectile
#+end_src
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
**** Forge
#+begin_src emacs-lisp
    (use-package forge
      :after magit
      :config
       (add-to-list 'forge-alist '("git.seven.secucloud.secunet.com" "git.seven.secucloud.secunet.com/api/v4" "git.seven.secucloud.secunet.com" forge-gitlab-repository))
       (add-to-list 'forge-alist '("cyberchaos.dev" "cyberchaos.dev/api/v4" "cyberchaos.sev" forge-gitlab-repository)))
#+end_src
#+begin_src nix
  magit
  forge
#+end_src
*** Commenting
Using evil-nerd-commenter also works without evil
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
#+begin_src nix
evil-nerd-commenter
#+end_src
* Nix end
End of Nix Configuration
#+BEGIN_SRC nix
  ]
#+END_SRC
